import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.SocketException;
import java.util.Scanner;

final class ChatClient {
    private ObjectInputStream sInput;
    private ObjectOutputStream sOutput;
    private Socket socket;

    private final String server;
    private final String username;
    private final int port;

    private ChatClient(String server, int port, String username) {
        this.server = server;
        this.port = port;
        this.username = username;
    } //constructor

    /*
     * This starts the Chat Client
     */
    private boolean start() {
        // Create a socket
        try {
            this.socket = new Socket(this.server, this.port);
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Create your input and output streams
        try {
            this.sInput = new ObjectInputStream(this.socket.getInputStream());
            this.sOutput = new ObjectOutputStream(this.socket.getOutputStream());
        } catch (IOException e) {
            e.printStackTrace();
        }

        // This thread will listen from the server for incoming messages
        Runnable r = new ListenFromServer();
        Thread t = new Thread(r);
        t.start();

        // After starting, send the clients username to the server.
        try {
            this.sOutput.writeObject(this.username);
        } catch (IOException e) {
            e.printStackTrace();
        }

        return true;
    } //start


    /*
     * This method is used to send a ChatMessage Objects to the server
     */
    private void sendMessage(ChatMessage msg) {
        try {
            this.sOutput.writeObject(msg);
        } catch (IOException e) {
            e.printStackTrace();
        }
    } //sendMessage


    /*
     * To start the Client use one of the following command
     * > java ChatClient
     * > java ChatClient username
     * > java ChatClient username portNumber
     * > java ChatClient username portNumber serverAddress
     *
     * If the portNumber is not specified 1500 should be used
     * If the serverAddress is not specified "localHost" should be used
     * If the username is not specified "Anonymous" should be used
     */
    public static void main(String[] args) {
        // Get proper arguments and override defaults
        ChatClient client;
            if (args.length == 0) {
                client = new ChatClient("localhost", 1500, "Anonymous");
            } else if (args.length == 1) {
                client = new ChatClient("localhost", 1500, args[0]);
            } else if (args.length == 2) {
                client = new ChatClient("localhost", Integer.parseInt(args[1]), args[0]);
            } else {
                client = new ChatClient(args[2], Integer.parseInt(args[1]), args[0]);
            }
        // Create your client and start it
        client.start();

        // Send an empty message to the server
        Scanner scanner = new Scanner(System.in);
        while(true) {
            String s = scanner.nextLine();
            if (s.equals("/logout")) {
                System.out.println("Client initiated logout");
                client.sendMessage(new ChatMessage(1, s));
                break;
            } else {
                client.sendMessage(new ChatMessage(0, s));
            }
        } //while
        scanner.close();
    } //main


    /*
     * This is a private class inside of the ChatClient
     * It will be responsible for listening for messages from the ChatServer.
     * ie: When other clients send messages, the server will relay it to the client.
     */
    private final class ListenFromServer implements Runnable {
        public void run() {

            while(true) {
                try {
                    ChatMessage msg;
                    if (ChatClient.this.sInput.readObject() == "/logout") {
                        msg = new ChatMessage(1, (String)(ChatClient.this.sInput.readObject()));
                    } else {
                        msg = new ChatMessage(0, (String)(ChatClient.this.sInput.readObject()));
                    }
                    //ChatMessage msg = (ChatMessage)ChatClient.this.sInput.readObject();
                    System.out.print(msg.getMsg());
                    if (msg.get_msgType() == 1) { //logout
                        sInput.close();
                        sOutput.close();
                        socket.close();
                        return;
                    } else if (msg.get_msgType() == 0) { //regular message
                        break;
                    }
                } catch (IOException | ClassNotFoundException e) {
                    e.printStackTrace();
                }
            } //while
        } //run

    } // ListenFromServer class
} // ChatClient class
